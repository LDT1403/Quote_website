// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Quote.Models;

public partial class DB_SWDContext : DbContext
{
    public DB_SWDContext()
    {
    }

    public DB_SWDContext(DbContextOptions<DB_SWDContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Cart> Carts { get; set; }

    public virtual DbSet<CartDetail> CartDetails { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Contract> Contracts { get; set; }

    public virtual DbSet<Image> Images { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<Option> Options { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<Request> Requests { get; set; }

    public virtual DbSet<RequestDetail> RequestDetails { get; set; }

    public virtual DbSet<Task> Tasks { get; set; }

    public virtual DbSet<Token> Tokens { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {
            IConfigurationRoot configuration = new ConfigurationBuilder()
               .SetBasePath(Directory.GetCurrentDirectory())
               .AddJsonFile("appsettings.json")
               .Build();
            var connectionString = configuration.GetConnectionString("apicon");
            optionsBuilder.UseSqlServer(connectionString);
        }
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Cart>(entity =>
        {
            entity.HasOne(d => d.User).WithOne(p => p.Cart)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cart_Users");
        });

        modelBuilder.Entity<CartDetail>(entity =>
        {
            entity.HasOne(d => d.Cart).WithMany(p => p.CartDetails).HasConstraintName("FK_CartDetail_Cart");

            entity.HasOne(d => d.Product).WithMany(p => p.CartDetails).HasConstraintName("FK_CartDetail_Product");
        });

        modelBuilder.Entity<Contract>(entity =>
        {
            entity.HasOne(d => d.Request).WithOne(p => p.Contract).HasConstraintName("FK_Contract_Request");
        });

        modelBuilder.Entity<Image>(entity =>
        {
            entity.HasOne(d => d.Product).WithMany(p => p.Images).HasConstraintName("FK_Image_Product");
        });

        modelBuilder.Entity<Option>(entity =>
        {
            entity.HasOne(d => d.Product).WithMany(p => p.Options).HasConstraintName("FK_Option_Product");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasOne(d => d.Contract).WithMany(p => p.Payments).HasConstraintName("FK_Payment_Contract");

            entity.HasOne(d => d.User).WithMany(p => p.Payments).HasConstraintName("FK_Payment_Users");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasOne(d => d.Category).WithMany(p => p.Products).HasConstraintName("FK_Product_Category");
        });

        modelBuilder.Entity<Request>(entity =>
        {
            entity.HasOne(d => d.Product).WithMany(p => p.Requests).HasConstraintName("FK_Request_Product");

            entity.HasOne(d => d.User).WithMany(p => p.Requests).HasConstraintName("FK_Request_Users");
        });

        modelBuilder.Entity<Task>(entity =>
        {
            entity.HasOne(d => d.Request).WithOne(p => p.Task).HasConstraintName("FK_Task_Request");

            entity.HasOne(d => d.User).WithMany(p => p.Tasks).HasConstraintName("FK_Task_Users");
        });

        modelBuilder.Entity<Token>(entity =>
        {
            entity.HasKey(e => e.TokeId).HasName("PK_tb_Token");

            entity.HasOne(d => d.User).WithMany(p => p.Tokens).HasConstraintName("FK_Token_User");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasOne(d => d.Manager).WithMany(p => p.InverseManager).HasConstraintName("FK_Users_Users");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}